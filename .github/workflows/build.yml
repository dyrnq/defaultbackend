name: build and release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix:
          vers:
          - "1.1"
          - "1.2"
          - "1.3"
          - "1.4"
          - "1.5"
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential ca-certificates curl jq gnupg2 ca-certificates psmisc procps xz-utils rsync libglib2.0-dev libgpgme-dev libassuan-dev libbtrfs-dev libdevmapper-dev pkg-config

      -
        name: Checkout
        uses: actions/checkout@v4
      # ARM64 processors (M1, M2, M3 series) used on macos-14 images are unsupported!
      # https://github.com/marketplace/actions/setup-docker-on-macos
      - name: 下载gcc
        uses: lmq8267/dl-musl@main
        with:
          target: aarch64-linux-musl

      - name: 输出gcc版本信息
        run: $CC -v
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - uses: actions/setup-go@v5
        with:
          #go-version: '1.20.14'
          go-version: 'stable'

      - name: Get gopath
        id: get_gopath
        run: echo ::set-output name=GOPATH::$(go env GOPATH)

      - run: go env
      - run: go version

      - name: Build defaultbackend binary
        shell: bash
        run: |
          build_image="golang:1.21-alpine3.20"
          dist=( linux/arm64 )
          for ((i=0; i<=${#dist[@]}-1; i++)); do
            tag="${dist[$i]}"
            os=$(awk -F/ '{print $1}' <<< "${tag}")
            arch=$(awk -F/ '{print $2}' <<< "${tag}")
            # docker run --rm -t -v $PWD:/build "${build_image}" sh -c "apk update && apk add build-base bash git gpgme btrfs-progs-dev llvm15-dev gcc musl-dev make && go env | grep CGO_ENABLED && cd /build && echo ${os}-${arch} && CGO_ENABLE=1 GOOS=${os} GOARCH=${arch} go build -ldflags \"-linkmode 'external' -extldflags '-static'\" -tags 'musl' -o server-${os}-${arch} server.go"
            
            echo ${os}-${arch} && CGO_ENABLED=1 GOOS=${os} GOARCH=${arch} CC=aarch64-linux-musl-gcc go build -ldflags "-linkmode 'external' -extldflags '-static'" -tags 'musl' -o server-${os}-${arch} server.go

          done
          ls -lh .

      - name: Build dockerfile (with no push)
        run: |
          latest_tag="--tag ${{ secrets.DOCKER_USERNAME }}/defaultbackend-arm64:${{ matrix.vers }}";
          echo $latest_tag;
          sudo cp -v -f server-linux-arm64 server
          docker buildx build \
          --platform linux/arm64/v8 \
          --output "type=image,push=false" \
          --file ./Dockerfile . $latest_tag


      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build dockerfile (with push)
        run: |
          latest_tag="--tag ${{ secrets.DOCKER_USERNAME }}/defaultbackend-arm64:${{ matrix.vers }}";
          echo $latest_tag;
          docker buildx build \
          --platform linux/arm64/v8 \
          --output "type=image,push=true" \
          --file ./Dockerfile . $latest_tag